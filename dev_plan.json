{
  "created": "2025-05-01T12:55:41.576499Z",
  "planTitle": "MyBabySync - Refactor to Central Apps Script Architecture",
  "tasks": [
    {
      "id": 1,
      "title": "Init",
      "description": "init repo",
      "status": "completed"
    },
    {
      "id": 2,
      "title": "Install dependencies",
      "description": "run npm install to install project dependencies",
      "status": "completed"
    },
    {
      "id": 3,
      "title": "Setup environment (.env.local)",
      "description": "create/update .env.local file with initial credentials",
      "status": "completed"
    },
    {
      "id": 4,
      "title": "Implement syncAllToKargov2 (Original Plan)",
      "description": "Original plan to add logic directly - Obsolete",
      "status": "obsolete"
    },
    {
      "id": 5,
      "title": "Create Core Logic Apps Script",
      "description": "Created private Apps Script project for core sync/label logic.",
      "status": "completed"
    },
    {
      "id": 6,
      "title": "Create Wrapper Apps Script",
      "description": "Created public Apps Script project to act as API wrapper.",
      "status": "completed"
    },
    {
      "id": 7,
      "title": "Deploy Wrapper Script as API Executable",
      "description": "Configured wrapper script project settings, linked GCP project, deployed as API Executable.",
      "status": "completed",
      "outputs": ["NEXT_PUBLIC_APPS_SCRIPT_DEPLOYMENT_ID=AKfycbxW3xcu6kw6PbkloOHd3hIdqp65yBgmrgqwSsrr-csbu0NzSz6jeHcW1V4Tf8ugLsdgBw"],
      "notes": "This ID likely refers to the deployment of the *template* wrapper script or potentially the Core IP script. It is NOT the ID used by the backend API routes to target individual user script copies for UserProperties management. Each user needs their own copied script ID stored in the DB."
    },
    {
      "id": 8,
      "title": "Add Core Library to Wrapper",
      "description": "Added Core Logic Script as a library dependency to the Wrapper Script.",
      "status": "completed"
    },
    {
      "id": 9,
      "title": "Refactor Wrapper Script Code",
      "description": "Modified wrapper script (mergedSyncAndLabel.gs) to accept parameters (sheetId, keys, etc.) and call library, removing PropertiesService and setup functions.",
      "status": "completed"
    },
    {
      "id": 10,
      "title": "Refactor Core Logic Library Code",
      "description": "Modified core library script (Code.gs) to accept parameters passed from wrapper, removing direct PropertiesService usage.",
      "status": "completed",
      "notes": "User confirmed this was done manually online. This facilitates the central wrapper script fetching user-specific settings (API keys, paths) from its UserProperties (scoped to the acting user) and passing them as parameters to the core logic library."
    },
    {
      "id": 11,
      "title": "Update Prisma Schema",
      "description": "Modify prisma/schema.prisma: remove googleScriptId, add driveFolderId, add fields for storing user API keys (consider encryption).",
      "status": "completed",
      "dependencies": [10]
    },
    {
      "id": 12,
      "title": "Run Prisma Migration",
      "description": "Run \"npx prisma migrate dev\" after updating schema.",
      "status": "completed",
      "dependencies": [11]
    },
    {
      "id": 13,
      "title": "Refactor Onboarding API (/api/onboarding/setup.js)",
      "description": "Onboarding logic now: 1) Creates a Google Drive folder for the user. 2) Copies a template Google Sheet (which has the Wrapper Apps Script bound to it) into the user's Drive folder. 3) Saves googleSheetId and driveFolderId to the Prisma DB. userAppsScriptId is initially null and will be registered by a separate API call from the script itself after user initialization.",
      "status": "completed",
      "dependencies": [12],
      "notes": "Backend API /api/onboarding/setup.js now copies a template sheet defined by TEMPLATE_SHEET_WITH_BOUND_SCRIPT_ID. This sheet contains the necessary bound Apps Script. The API no longer copies a standalone script file. The user's Apps Script ID is registered via a new endpoint (/api/gscript/register-script-id) called by the script upon initialization by the user. Frontend trigger in pages/app/index.js calls /api/onboarding/setup. The subsequent step for the user is to open the sheet and run an initialization function from the script's custom menu."
    },
    {
      "id": 14,
      "title": "Refactor/Create Key Saving API & Script Registration",
      "description": "User-specific API keys and script configurations are saved to UserProperties of the user's copied wrapper Google Apps Script. This is managed via /api/gscript/set-user-property and /api/gscript/get-all-user-properties. A new API route /api/gscript/register-script-id allows the user's script to register its ID with the backend after user initialization from the sheet.",
      "status": "in progress",
      "dependencies": [12, 13],
      "subtasks": [
        {
          "title": "Implement Next.js API route /api/gscript/set-user-property",
          "description": "This route must authenticate the user, **retrieve their userAppsScriptId from the DB**, and call the 'saveToUserProperties(key, value)' function in that specific Apps Script instance.",
          "status": "completed - needs testing"
        },
        {
          "title": "Implement Next.js API route /api/gscript/get-all-user-properties",
          "description": "This route must authenticate the user, **retrieve their userAppsScriptId from the DB**, and call the 'getAllUserProperties()' function in that specific Apps Script instance.",
          "status": "completed - needs testing"
        },
        {
          "title": "Implement Next.js API route /api/gscript/register-script-id",
          "description": "Create a new API route that accepts a POST request from the user's copied Apps Script. It receives the scriptId, sheetId, and a userId (or userEmail to lookup userId), authenticates the call (e.g., shared secret), and updates the user's record in Prisma with userAppsScriptId and googleSheetId.",
          "status": "completed"
        },
        {
          "title": "Implement Apps Script functions in Template Wrapper",
          "description": "Ensure saveToUserProperties(key, value) and getAllUserProperties() exist in the template wrapper script. Add an onOpen() function to create a custom menu (e.g., 'KolayXport' > 'Initialize Settings'). The 'Initialize Settings' function should prompt for any initial UserProperties (like FEDEX_FOLDER_ID), save them, and then call back to the Next.js API (/api/gscript/register-script-id) with its ScriptApp.getScriptId(), SpreadsheetApp.getActiveSpreadsheet().getId(), a user identifier (email/ID), and a shared secret.",
          "status": "in progress"
        },
        {
          "title": "Update Settings Page Frontend",
          "description": "Modify pages/app/settings.js to use /api/gscript/get-all-user-properties for loading initial settings. Ensure it gracefully handles cases where userAppsScriptId might be initially null (pending script initialization by the user).",
          "status": "completed"
        },
        {
           "title": "Implement Frontend Onboarding Trigger & Logic",
           "description": "Added useEffect in pages/app/index.js to call /api/onboarding/setup. The UI should then guide the user to open their new sheet and run the 'Initialize Settings' function from the script's menu. The old logic to automatically call /api/gscript/set-user-property for FEDEX_FOLDER_ID immediately after onboarding is removed, as this is now part of the script's initialization.",
           "status": "in progress"
        }
      ]
    },
    {
      "id": 15,
      "title": "Update Settings Modal Frontend",
      "description": "Modify components/SettingsModal.jsx to call the new database key saving API endpoint.",
      "status": "completed",
      "dependencies": [14]
    },
    {
      "id": 16,
      "title": "Refactor Backend API Callers",
      "description": "Update /api/syncOrders, /api/getOrders, /api/generateLabel to fetch user data/keys from DB, call central deployment ID, and pass parameters to wrapper script.",
      "status": "completed",
      "dependencies": [12, 7]
    },
    {
      "id": 17,
      "title": "Update Documentation (README, ROADMAP) - Initial Phase",
      "description": "Update README.md and ROADMAP.md to reflect the new central script architecture.",
      "status": "completed",
      "dependencies": [10]
    },
    {
      "id": 18,
      "title": "Test End-to-End Flow",
      "description": "Thoroughly test onboarding, settings saving, order sync, order display, and label generation.",
      "status": "blocked",
      "notes": "Completed onboarding and settings tests. Encountered persistent 'Invalid Credentials' (401) / 'File Not Found' (404) errors when calling Google Sheets/Drive/Apps Script Execution APIs. Root cause is likely limitations due to OAuth consent screen being in 'Testing' mode and requiring verification for sensitive scopes. Also addressed GCP verification center issues (domain, privacy URL). **Onboarding resource creation (folder, sheet, script copy) is now working correctly.**",
      "dependencies": [13, 15, 16],
      "subtasks": [
        {
          "title": "Manual Testing: Onboarding",
          "description": "Log in with a new Google account, complete onboarding, and verify a new sheet and folder are created in your Google Drive.",
          "status": "completed"
        },
        {
          "title": "Manual Testing: Settings",
          "description": "Open the Settings page, enter API keys, and save. Refresh and verify the keys persist.",
          "status": "completed"
        },
        {
          "title": "Manual Testing: Sync Orders",
          "description": "Click 'Sync Orders' and verify orders appear in the table.",
          "status": "blocked - OAuth Verification"
        },
        {
           "title": "Manual Testing: Get Orders",
           "description": "Verify order table loads data from sheet.",
           "status": "blocked - OAuth Verification"
        },
        {
          "title": "Manual Testing: Generate Label",
          "description": "Click 'Generate Label' for an order and verify a label is created and a link appears.",
           "status": "pending - Likely blocked by OAuth Verification"
        },
        {
          "title": "Unit Tests: Run Jest",
          "description": "Open a terminal, run 'npm test', and check that all tests pass. If any fail, read the error message and ask for help if needed.",
          "status": "completed"
        },
        {
          "title": "E2E Tests: Run Cypress",
          "description": "Open a terminal, run 'npx cypress open' or 'npx cypress run', and follow the on-screen instructions.",
          "status": "pending"
        },
        {
          "title": "Report Issues",
          "description": "If anything does not work as expected, write down what you did and what happened. Share this with the developer for help.",
          "status": "completed"
        }
      ]
    },
    {
      "id": 19,
      "title": "Prepare for Deployment",
      "description": "Configure production database, set all production environment variables on hosting platform.",
      "status": "completed",
      "dependencies": [18, 22],
      "notes": "Successfully configured Supabase with direct IPv4-enabled connection for DATABASE_URL in Vercel. All critical environment variables set. Application login successful on kolayxport.com.",
      "subtasks": [
        {
          "title": "Set up Supabase Database & Get Direct IPv4 Connection String",
          "description": "Ensured Supabase project is active and obtained the IPv4-enabled direct connection string (with add-on).",
          "status": "completed"
        },
        {
          "title": "Configure DATABASE_URL in Vercel with Supabase Direct Connection",
          "description": "Added the Supabase direct IPv4-enabled connection string as DATABASE_URL environment variable in Vercel for production.",
          "status": "completed"
        },
        {
          "title": "Push Prisma Schema to Supabase DB",
          "description": "Successfully ran 'npx prisma db push' against the Supabase database using the direct IPv4-enabled connection string.",
          "status": "completed"
        },
        {
          "title": "Set Other Production Environment Variables",
          "description": "Ensured NEXTAUTH_SECRET, NEXTAUTH_URL, GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, NEXT_PUBLIC_APPS_SCRIPT_DEPLOYMENT_ID are set in Vercel.",
          "status": "completed"
        }
      ]
    },
    {
      "id": 20,
      "title": "Align Environment Variables and Onboarding Logic",
      "description": "Ensure .env.local uses correct variable names: GOOGLE_SHEETS_SPREADSHEET_ID for the master template, GOOGLE_SHEETS_PRIVATE_KEY for the service account, and onboarding copies the master sheet for each user. Remove legacy/unused variables. Confirm all required variables are present.",
      "status": "completed",
      "dependencies": [18]
    },
    {
      "id": 21,
      "title": "Fix Missing UI Components for Dev Server",
      "description": "Install missing shadcn/ui components (label, etc.) so the dev server can start.",
      "status": "completed", 
      "dependencies": [20]
    },
    {
      "id": 22,
      "title": "Google OAuth & GCP Setup and Verification",
      "description": "Complete the Google Cloud OAuth Consent Screen verification process, including scope justifications and providing a demo video, to enable full API access. Ensure domain verification and correct privacy/homepage URLs.",
      "status": "in progress",
      "dependencies": [],
      "notes": "Verification submitted. App functionality requiring sensitive scopes (Sheets, Drive, Apps Script Execution API) may be limited until verification completes. Homepage ownership and privacy policy URL discrepancies resolved.",
      "subtasks": [
        {
          "title": "Verify Homepage Ownership with Google Search Console",
          "description": "Add TXT record to DNS for domain verification.",
          "status": "completed"
        },
        {
          "title": "Resolve Privacy Policy URL in GCP Consent Screen",
          "description": "Ensure the privacy policy link is distinct from the homepage link and points to the correct page.",
          "status": "completed"
        },
        {
          "title": "Await Full OAuth Verification from Google",
          "description": "Monitor Google's review process after resolving initial discrepancies.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 23,
      "title": "Generate Sitemap",
      "description": "Install next-sitemap, configure, and generate sitemap.xml and robots.txt.",
      "status": "completed"
    },
    {
      "id": 24,
      "title": "Create Public Footer Component",
      "description": "Create components/PublicFooter.js with specified three-column layout, dark gradient, social links, product/resource links, and copyright.",
      "status": "completed"
    },
    {
      "id": 25,
      "title": "Implement Public Pages Structure",
      "description": "Created PublicLayout, PublicNav, refactored public pages (index, privacy, signin, error) to use PublicLayout. Established new /dashboard route for authenticated users.",
      "status": "completed",
      "dependencies": [24]
    },
    {
      "id": 26,
      "title": "Redesign Homepage (pages/index.js)",
      "description": "Implemented a new Apple-esque landing page design with multiple sections (Hero, Trust Badges, Features, Comparison, Testimonials, CTA, FAQ).",
      "status": "completed",
      "dependencies": [25]
    },
    {
      "id": 27,
      "title": "Create Placeholder Page: Kurumsal (pages/kurumsal.js)",
      "description": "Created corporate/about page with hero, timeline, and CTA.",
      "status": "completed",
      "dependencies": [25]
    },
    {
      "id": 28,
      "title": "Create Placeholder Page: Entegrasyonlar (pages/entegrasyonlar.js)",
      "description": "Created integrations page with hero and filterable logo grid.",
      "status": "completed",
      "dependencies": [25]
    },
    {
      "id": 29,
      "title": "Create Placeholder Page: Nasıl Kullanılır (pages/nasil-kullanirim.js)",
      "description": "Created how-to page with hero, stepper component, and Loom video placeholder.",
      "status": "completed",
      "dependencies": [25]
    },
    {
      "id": 30,
      "title": "Create Placeholder Page: İletişim (pages/iletisim.js)",
      "description": "Created contact page with hero, two-column layout (form with react-hook-form, office info/map), and toast notifications.",
      "status": "completed",
      "dependencies": [25]
    },
    {
      "id": 31,
      "title": "Create Placeholder Page: Fiyatlandırma (pages/fiyatlandirma.js)",
      "description": "Created pricing page with hero, plans grid, comparison table, and FAQ accordion.",
      "status": "completed",
      "dependencies": [25]
    },
    {
      "id": 32,
      "title": "Create Placeholder Page: Kariyer (pages/kariyer.js)",
      "description": "Created careers page with hero (aurora SVG), culture section, open roles list, timeline, and CTA banner.",
      "status": "completed",
      "dependencies": [25]
    },
    {
      "id": 33,
      "title": "Create Docs Landing Page (pages/docs/index.js)",
      "description": "Created documentation landing page with hero, featured guides grid, and code snippet preview.",
      "status": "completed",
      "dependencies": [25]
    },
    {
      "id": 34,
      "title": "Setup next-seo for Global SEO Management",
      "description": "Installed next-seo, created next-seo.config.js, and integrated DefaultSeo into _app.js. Updated PublicLayout to use NextSeo.",
      "status": "completed"
    },
    {
      "id": 35,
      "title": "Create Authenticated App Layout (components/AppLayout.js)",
      "description": "Designed and implemented a new layout for the authenticated dashboard area, featuring a collapsible sidebar and sticky topbar.",
      "status": "completed"
    },
    {
      "id": 36,
      "title": "Refactor Dashboard to /app Route and AppLayout",
      "description": "Created pages/app/index.js using AppLayout, migrated old dashboard content, and updated sign-in and relevant links to point to /app.",
      "status": "completed",
      "dependencies": [35]
    },
    {
      "id": 37,
      "title": "Create Blog Pages (pages/blog.js & pages/blog/[slug].js)",
      "description": "Implemented main blog listing page and dynamic blog post pages with placeholder content, integrating with PublicLayout and NextSeo for SEO.",
      "status": "completed",
      "dependencies": [25]
    },
    {
      "id": 38,
      "title": "SEO Audit & Optimization Roadmap",
      "description": "Initial SEO audit performed; identified improvements such as structured data, canonical tags, per-page Open Graph images, alt text review, performance optimizations, and Google Search Console enhancements.",
      "status": "planned",
      "dependencies": [34],
      "subtasks": [
        { "title": "Add canonical URLs with NextSeo", "status": "completed" },
        { "title": "Per-page OG images & metadata", "status": "in progress" },
        { "title": "Structured data (Organization, Article)", "status": "in progress" },
        { "title": "Image optimization audit", "status": "planned" },
        { "title": "Accessibility & Lighthouse improvements", "status": "planned" },
        { 
          "title": "Implement File Uploads for Settings", 
          "description": "Handle LETTERHEAD_FILE_ID and STAMP_FILE_ID uploads in settings, saving to Drive and storing IDs in UserProperties.",
          "status": "planned"
        }
      ]
    }
  ],
  "notes": "Architecture pivoted to a central API Executable Wrapper Script calling a private Core Logic Library. User-specific data (sheetId, keys, folderId) is stored in the backend DB and passed as parameters. Public pages and authenticated app section now have distinct, modern layouts. **Correction & Current Onboarding Flow:** Architecture uses a user-specific **copied template Google Sheet which contains a bound Apps Script** (this script is the 'wrapper script', stored in the user's Google Account). This wrapper script holds UserProperties and calls the central Core Logic Library. The `/api/onboarding/setup` API copies this template sheet for the user. The user then opens the sheet, runs an 'Initialize Settings' function from a custom menu. This script function saves initial settings (e.g., FedEx Folder ID) to its UserProperties AND calls back to a new Next.js API endpoint (`/api/gscript/register-script-id`) to register its `scriptId` and `sheetId` with the backend database. Subsequent backend API routes (like `/api/gscript/set-user-property`) target the user's specific script copy ID (retrieved from the DB) for settings management.",
  "testingStrategy": {
    "overview": "Testing ensures the app works for real users and catches bugs before deployment. We use three types: manual testing (step-by-step checks in the browser), unit tests (automated checks for small pieces of code), and end-to-end (E2E) tests (automated checks for the whole user flow).",
    "manualTesting": {
      "onboarding": "Log in with a new Google account, complete onboarding, and verify a new sheet and folder are created in your Google Drive.",
      "settings": "Open the Settings page, enter API keys, and save. Refresh and verify the keys persist.",
      "syncOrders": "Click \"Sync Orders\" and verify orders appear in the table.",
      "getOrders": "Verify order table loads data from sheet.",
      "generateLabel": "Click \"Generate Label\" for an order and verify a label is created and a link appears.",
      "publicPages": "Navigate through all public pages (Homepage, Kurumsal, Entegrasyonlar, Nasıl Kullanılır, İletişim, Fiyatlandırma, Kariyer, Dokümanlar) and check for layout, content, and link integrity."
    },
    "unitTests": "Open a terminal, run \"npm test\", and check that all tests pass. If any fail, read the error message and ask for help if needed.",
    "e2eTests": "Open a terminal, run \"npx cypress open\" or \"npx cypress run\", and follow the on-screen instructions.",
    "reportingIssues": "If anything does not work as expected, write down what you did and what happened. Share this with the developer for help."
  },
  "scriptUserPropertiesReference": {
    "description": "List of property keys expected by the user's copied Google Apps Script (wrapper script) in its UserProperties. The Next.js settings page (pages/app/settings.js) and onboarding logic should save/retrieve values using these exact keys. VEEQO_ORDERS_URL is hardcoded in the script.",
    "properties": [
      "VEEQO_API_KEY",
      "TRENDYOL_SUPPLIER_ID",
      "TRENDYOL_API_KEY",
      "TRENDYOL_API_SECRET",
      "SHIPPO_TOKEN",
      "DEFAULT_CURRENCY_CODE",
      "FEDEX_API_KEY",
      "FEDEX_API_SECRET",
      "FEDEX_ACCOUNT_NUMBER",
      "FEDEX_FOLDER_ID",
      "SHIPPER_NAME",
      "SHIPPER_PERSON_NAME",
      "SHIPPER_PHONE_NUMBER",
      "SHIPPER_STREET_1",
      "SHIPPER_STREET_2",
      "SHIPPER_CITY",
      "SHIPPER_STATE_CODE",
      "SHIPPER_POSTAL_CODE",
      "SHIPPER_COUNTRY_CODE",
      "SHIPPER_TIN_NUMBER",
      "SHIPPER_TIN_TYPE",
      "DUTIES_PAYMENT_TYPE",
      "IMPORTER_OF_RECORD"
    ],
    "alignmentNotes": [
      {
        "scriptKey": "SHIPPO_TOKEN",
        "frontendKeySuggestion": "SHIPPO_API_TOKEN",
        "issue": "Script expects 'SHIPPO_TOKEN'. Frontend settings page likely uses/saves as 'SHIPPO_API_TOKEN'. Frontend should be updated to save with key 'SHIPPO_TOKEN'."
      },
      {
        "scriptKey": "DEFAULT_CURRENCY_CODE",
        "frontendKeySuggestion": "DEFAULT_CURRENCY",
        "issue": "Script expects 'DEFAULT_CURRENCY_CODE'. Frontend settings page likely uses/saves as 'DEFAULT_CURRENCY'. Frontend should be updated to save with key 'DEFAULT_CURRENCY_CODE'."
      },
      {
        "scriptKey": "SHIPPER_NAME",
        "frontendKeySuggestion": "SHIPPER_CONTACT_COMPANY_NAME",
        "issue": "Script expects 'SHIPPER_NAME'. Frontend settings page likely uses/saves as 'SHIPPER_CONTACT_COMPANY_NAME'. Frontend should be updated to save with key 'SHIPPER_NAME'."
      },
      {
        "scriptKey": "SHIPPER_PERSON_NAME",
        "frontendKeySuggestion": "SHIPPER_CONTACT_PERSON_NAME",
        "issue": "Script expects 'SHIPPER_PERSON_NAME'. Frontend settings page likely uses/saves as 'SHIPPER_CONTACT_PERSON_NAME'. Frontend should be updated to save with key 'SHIPPER_PERSON_NAME'."
      },
      {
        "scriptKey": "SHIPPER_PHONE_NUMBER",
        "frontendKeySuggestion": "SHIPPER_CONTACT_PHONE_NUMBER",
        "issue": "Script expects 'SHIPPER_PHONE_NUMBER'. Frontend settings page likely uses/saves as 'SHIPPER_CONTACT_PHONE_NUMBER'. Frontend should be updated to save with key 'SHIPPER_PHONE_NUMBER'."
      },
      {
        "scriptKey": "SHIPPER_STREET_1",
        "frontendKeySuggestion": "SHIPPER_ADDRESS_LINE1",
        "issue": "Script expects 'SHIPPER_STREET_1'. Frontend settings page likely uses/saves as 'SHIPPER_ADDRESS_LINE1'. Frontend should be updated to save with key 'SHIPPER_STREET_1'."
      },
      {
        "scriptKey": "SHIPPER_STREET_2",
        "frontendKeySuggestion": "SHIPPER_ADDRESS_LINE2",
        "issue": "Script expects 'SHIPPER_STREET_2'. Frontend settings page likely uses/saves as 'SHIPPER_ADDRESS_LINE2'. Frontend should be updated to save with key 'SHIPPER_STREET_2'."
      },
      {
        "scriptKey": "SHIPPER_CITY",
        "frontendKeySuggestion": "SHIPPER_ADDRESS_CITY",
        "issue": "Script expects 'SHIPPER_CITY'. Frontend settings page likely uses/saves as 'SHIPPER_ADDRESS_CITY'. Frontend should be updated to save with key 'SHIPPER_CITY'."
      },
      {
        "scriptKey": "SHIPPER_STATE_CODE",
        "frontendKeySuggestion": "SHIPPER_ADDRESS_STATE_PROVINCE_CODE",
        "issue": "Script expects 'SHIPPER_STATE_CODE'. Frontend settings page should clarify that a 3-letter Turkish city code is expected (e.g., ADA for Adana). Frontend should be updated to save with key 'SHIPPER_STATE_CODE'."
      },
      {
        "scriptKey": "SHIPPER_POSTAL_CODE",
        "frontendKeySuggestion": "SHIPPER_ADDRESS_POSTAL_CODE",
        "issue": "Script expects 'SHIPPER_POSTAL_CODE'. Frontend settings page likely uses/saves as 'SHIPPER_ADDRESS_POSTAL_CODE'. Frontend should be updated to save with key 'SHIPPER_POSTAL_CODE'."
      },
      {
        "scriptKey": "SHIPPER_COUNTRY_CODE",
        "frontendKeySuggestion": "SHIPPER_ADDRESS_COUNTRY_CODE",
        "issue": "Script expects 'SHIPPER_COUNTRY_CODE'. Frontend settings page likely uses/saves as 'SHIPPER_ADDRESS_COUNTRY_CODE'. Frontend should be updated to save with key 'SHIPPER_COUNTRY_CODE'."
      },
      {
        "scriptKey": "SHIPPER_TIN_NUMBER",
        "frontendKeySuggestion": "SHIPPER_TAX_ID",
        "issue": "Script expects 'SHIPPER_TIN_NUMBER'. Frontend settings page likely uses/saves as 'SHIPPER_TAX_ID'. Frontend should be updated to save with key 'SHIPPER_TIN_NUMBER'."
      },
      {
        "scriptKey": "SHIPPER_TIN_TYPE",
        "frontendKeySuggestion": "SHIPPER_TAX_ID_TYPE",
        "issue": "Script expects 'SHIPPER_TIN_TYPE'. This will be a constant 'BUSINESS_NATIONAL' and should be set implicitly when SHIPPER_TIN_NUMBER is saved. No UI field needed. Frontend should be updated to save with key 'SHIPPER_TIN_TYPE'."
      },
      {
        "scriptKey": "IMPORTER_OF_RECORD",
        "issue": "New requirement. Expects a JSON string. Frontend settings page implements UI fields for Importer details (contact person/company/phone/email, address street/city/state/postal/country). On save, these fields are compiled into a JSON string. Importer's state/province code must be a numeric Turkish city plate code (e.g., 01 for Adana). Validation: If any Importer field has a value, all Importer fields are required to be filled before saving."
      }
    ]
  }
}