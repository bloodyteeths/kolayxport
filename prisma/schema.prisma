// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // Removed as we're using direct URL for runtime too
}

// --- User Model --- 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique // Email is often unique, provided by Google
  emailVerified DateTime? // Useful field from NextAuth adapter
  image         String? // User profile image URL

  googleAccountId String? @unique // From NextAuth account.providerAccountId - IMPORTANT for linking
  googleSheetId   String?   @unique // ID of the user's copied Google Sheet
  driveFolderId   String?             // ID of the user's Drive folder for labels
  userAppsScriptId String?   @unique // ID of the user's copied Wrapper Apps Script

  // --- User-Specific API Keys & Settings --- 
  // IMPORTANT: Consider encrypting these values before storing in production
  veeqoApiKey        String?
  shippoToken        String?
  fedexAccountNumber String?
  fedexMeterNumber   String? // If needed by your core library
  fedexApiKey        String?
  fedexSecretKey     String?
  // Add other keys/settings needed by the core library if applicable (e.g., Trendyol)
  // trendyolSupplierId      String?
  // trendyolApiKey          String?
  // trendyolApiSecret       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Relationships ---
  accounts       Account[]
  sessions       Session[]
  marketplaceConfigs  MarketplaceConfig[]
  orders         Order[]
  products       Product[]
}

// --- NextAuth Models (Required for PrismaAdapter) --- 
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // Store refresh token securely!
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int? // Add field for Google OAuth

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- New Models from Roadmap ---
model MarketplaceConfig {
  id            String    @id @default(cuid())
  userId        String
  name          String
  config        Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id            String    @id @default(cuid())
  marketplace   String
  marketplaceKey String
  customerName  String
  status        String
  shipByDate    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  items         OrderItem[]
}

model OrderItem {
  id            String    @id @default(cuid())
  orderId       String
  sku           String
  quantity      Int
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  labelJobs     LabelJob[]

  // Product reference - optional as some orders may have items not in product catalog
  productId     String?
  product       Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)
}

model LabelJob {
  id            String    @id @default(cuid())
  itemId        String
  carrier       String
  status        String
  pdfUrl        String?
  errorMessage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  item          OrderItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

// --- Step 8: Inventory Management Models ---

model Product {
  id            String    @id @default(cuid())
  sku           String
  name          String
  description   String?
  price         Decimal   @db.Decimal(10, 2)
  cost          Decimal?  @db.Decimal(10, 2)
  weight        Float?
  dimensions    Json?     // e.g. {"length": 10, "width": 5, "height": 2}
  imageUrl      String?
  active        Boolean   @default(true)
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  inventories   Inventory[]
  orderItems    OrderItem[]
  marketplaceProducts MarketplaceProduct[]
  
  @@unique([userId, sku])
}

model Inventory {
  id            String    @id @default(cuid())
  productId     String
  location      String    @default("default") // e.g. warehouse name or "default"
  quantity      Int       @default(0)
  reorderLevel  Int?      // when to reorder
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([productId, location])
}

model MarketplaceProduct {
  id                String  @id @default(cuid())
  productId         String
  marketplace       String  // e.g., "veeqo", "trendyol"
  marketplaceId     String  // ID of the product in the marketplace
  marketplaceData   Json?   // Additional marketplace-specific data
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([marketplace, marketplaceId])
}
